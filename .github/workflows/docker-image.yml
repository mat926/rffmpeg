name: Check Jellyfin Release and Push to Docker

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  push:
    branches:
      - master
  workflow_dispatch:     # Allows manual triggering

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
        new_version: ${{ steps.version_check.outputs.new_version }}
        latest_tag: ${{ steps.version_check.outputs.latest_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 0
        #   token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest Jellyfin version
        id: version_check
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/jellyfin/jellyfin/releases/latest | jq -r '.tag_name')
          if [ -f last_jellyfin_version.txt ]; then
            CURRENT_TAG=$(cat last_jellyfin_version.txt)
          else
            CURRENT_TAG=""
          fi
          echo "Latest tag: $LATEST_TAG"
          echo "Current tag: $CURRENT_TAG"
          if [ "$LATEST_TAG" != "$CURRENT_TAG" ]; then
            echo "New version available"
            echo "new_version=true" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "No new version available"
            echo "new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version file
        if: steps.version_check.outputs.new_version == 'true'
        run: |
            echo "${{ steps.version_check.outputs.latest_tag }}" > last_jellyfin_version.txt
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add last_jellyfin_version.txt
            git commit -m "Update Jellyfin version to ${{ steps.version_check.outputs.latest_tag }}"
            git push

  build-and-push:
        needs: check-version
        if:  ${{ needs.check-version.outputs.new_version == 'true' }}
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v2
    
          - name: Log in to Docker Hub
            uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
    
          - name: Build and push Docker image
            uses: docker/build-push-action@v4
            with:
                context: .
                push: false
                tags: mat926/jellyfin-rffmpeg:latest